# This is the example configuration file for PyHeufyBot.  Make sure you rename
# this file to "heufybot.yaml" or create a new file with this name!  By default
# most lines in this config file are commented out and the bot will usually use
# the values you see in the commented line (not all the time).  Make sure you
# uncomment a line if you change something.


# CORE CONFIGURATION
# These values are always used and give basic information about the bot.

# nickname: string (default: "PyHeufyBot")
# The nickname that will be given to the bot when connecting.  If this nickname
# is already in use, an underscore will be appended until reaching a nickname
# that is available.
#nickname: "PyHeufyBot"

# username: string (default: nickname)
# The username or ident that will be given to the bot when connecting.
#username: "PyHeufyBot"

# realname: string (default: nickname)
# The realname or gecos that will be given to the bot when connecting.
#realname: "PyHeufyBot"

# servers: dictionary (REQUIRED!):
# The servers the bot will connect to on startup.  The keys in this dictionary
# represent the host of the server to connect to.  Servers can override most
# global settings of the bot, like the nickname.  A special setting is the
# "disabled_modules", which cannot be used as a global setting and MUST be
# defined in the servers dictionary.  Any module in this list will be ignored
# for that specific server.
#servers:
#  irc.example.org:
#    nickname: "OtherBot"
#    disabled_modules:
#    - CTCP

# port: int (default: 6667)
# The port the bot will use to connect to a server.  It is recommended to put
# this in the "servers" dictionary.
#port: 6667

# ssl: boolean (default: false)
# Whether or not the bot should try to connect securely.  Requires PyOpenSSL to
# be installed.  See optional-requirements.txt.
#ssl: false

# password: string (default: null)
# Uncomment this if the server(s) you want to connect to require(s) a password.
# It is recommended to put this in the "servers" dictionary.
#password: null

# channels: dictionary (default: null)
# The channels the bot will join after connecting to the server.  The format is
# name: password.  Use null for channels that don't require a password.  It is
# recommended to put this in the "servers" dictionary.
#channels:
#  "#channel1": null
#  "#channel2": "channelpassword"

# MODULES
# With only the core the bot will not do much more than idle.  For extra
# functionality additional modules can be loaded.

# modules: list (default: empty list)
# The modules the bot will load on startup.
#modules: # Uncomment this line if you decide to load any modules.

# Admin: Enables permission checks for command modules, based on a user's
# hostmask.
#- Admin

# ChannelLogger: Enables logging of the channels the bot is in.
#- ChannelLogger

# CommandHandler: Enables the use of bot commands.
#- CommandHandler

# CTCP: Enables replying to CTCP commands.  The supported commands are PING,
# VERSION, TIME and SOURCE.
#- CTCP

# GeoLocation: Provides utility functions for getting coordinates for a given
# location from the Google Maps API.  Requires WebUtils to be loaded.
#- GeoLocation

# NickServIdentify: Enables sending a password to IRC services for
# authentication.
#- NickServIdentify

# URLFollow: Enables the bot to look up the content details of posted URLs.
# Requires isodate to be installed.  See optional-requirements.txt.
#- URLFollow

# WebUtils: Enables fetch and posting of URLs.  Requires Requests to be
# installed.  See optional-requirements.txt.
#- WebUtils


# COMMAND MODULES
# These are special modules that allow users to interact with the bot through
# commands.  To be able to use any of these command modules, the CommandHandler
# module MUST be loaded.

# Apathy: It does... things.  I can't be bothered to fill them out.  Find out
# for yourself.
#- Apathy

# Commands: Enables the Commands command to provide a list of all commands that
# are available through the modules that are enabled for the current server.
#- Commands

# ConnectionControl: Enables the Connect, Disconnect, Reconnect, Shutdown and
# Restart commands to provide control over the bot's connections at runtime.
#- ConnectionControl

# Event: Enables the Event, TimeTill, TimeSince, DateOf, Events, REvent,
# SubEvent and UnsubEvent commands to create and count down to certain events
# that are happening, as well as subscribing to them.
#- Event

# Help: Enables the Help commands to display a list of all enabled command
# modules on a server or to get help for a specific command.
#- Help

# Ignore: Enables the Ignore and Unignore commands, to prevent some users from
# using commands.
#- Ignore

# Join: Enables the Join command, which lets users request the bot in a given
# channel.
#- Join

# Log: Enables the Log command, which lets users request the log of a given
# channel. Requires ChannelLogger to be loaded. Additional configuration is
# also necessary and can be found in the module configuration section.
#- Log

# LogSearch: Enables the FirstSeen, LastSeen, LastSaw, FirstSaid and LastSaid
# commands for searching the logs.
#- LogSearch

# ModuleLoader: Enables the Load, Unload, Reload, Enable and Disable commands.
# These commands are used to control what modules are loaded and used at
# runtime.
#- ModuleLoader

# Modules: Enables the Modules command, which lists all the modules that are
# currently loaded.
#- Modules

# Nick: Enables the Nick command, which lets users change the nickname of the
# bot.
#- Nick

# NowPlaying: Enables the NP and NPLink commands, which let users request their
# currently playing music from LastFM or link their nickname to their LastFM
# account.  Requires beautifulsoup4 to be installed.  See
# optional-requirements.txt.
#- NowPlaying

# OutOfContext: Enables the Ooc commands, which are used to keep track of a
# list of quotes in a channel.
#- OutOfContext

# Part: Enables the Part command, whichs lets users request the bot to leave a
# given channel.
#- Part

# Rehash: Enables the Rehash command, used to reload the configuration files.
#- Rehash

# Say: Enables the Say command, which lets the bot echo a message or action
# given by the user.
#- Say

# Source: Enables the Source command, which provides a link to the source code
# of the bot.
#- Source

# Tell: Enabels the Tell, Tellafter, Stells and Rtell commands, which provide
# a messaging system.
#- Tell

# Time: Enables the Time command, which provides the local time for a place or
# user when requested.  Requires WebUtils and GeoLocation to be loaded.
#- Time

# Uptime: Enables the Uptime command, which tells the user how long the bot
# has been running.
#- Uptime

# UserLocationStorage: Provides utility functions to determine the location of
# a user when they have registered their location with the bot.  Enables the
# Addloc and Remloc commands.
#- UserLocationStorage

# Weather: Enables the Weather and Forecast commmands, which provide the
# weather or forecast for a place or user when requested.  Requires WebUtils
# and GeoLocation to be loaded.
#- Weather

# WordCounter: Enables the AddWordCount, RemWordCount and WordCount commands
# for keeping track of how many times a certain word has been said in a
# channel.
#- WordCounter


# MODULE CONFIGURATION
# Some modules provide additional configuration options.  They can also
# be specified per server.

# bot_admins: list (Admin, default: empty list)
# The users that can use command modules that require admin permissions.  The
# values of the list are hostmasks with possible wildcards.
#bot_admins:
#  - someuser!*@localhost

# logpath: string (ChannelLogger, default: "logs")
# The folder where the channel logs will be stored.
#logpath: "logs"

# command_prefix: string (CommandHandler, default: "!")
# The prefix that has to be used to run a bot command.
#command_prefix: "!"

# logurl: string (Log, default: "irc.example.com")
# The URL from which the logs are accessible when the Log command is used.
#logurl: "irc.example.com"

# nickserv_nick: string (NickServIdentify, default: "NickServ")
# The name of authentication service.
#nickserv_nick: "NickServ"

# nickserv_pass: string (NickServIdentify, no default)
# The password that will be sent to the authentication service.
#nickserv_pass: null

# update_channel: string (Update, default: "stable")
# The update channel that will be used.  Possible values are "stable" and
# "dev".  "stable" will pull the latest tag.  "dev" will pull the latest commit
# on the master branch.
#update_channel: "stable"

# use_userlocation: boolean (Weather, default: false)
# If this is enabled, some modules that can make use of user locations will
# utilize this.
#use_userlocation: false

# webrequest_timeout: int (WebUtils, default: 10)
# The number of seconds to wait for the server to respond when using a web
# request.
#webrequest_timeout: 10
